#!/usr/bin/env bash

###
#
# Prepare musl-cross-make repository
# - apply some patches (Makefile ...)
# - copy config.mak
#
###

script_dir="$(cd "$(dirname "$(readlink -f "$0")")" && pwd)" || { echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2; exit 2; }
source "${script_dir}/../env/musl-cross-make"

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_BOOLEAN([verbose],[v],[enable verbose mode],[off])
# ARG_POSITIONAL_SINGLE([commit-id],[Commit id (ex: 53280e53a32202a0ee874911fc52005874db344b)],[${musl_cross_make_default_commit_id}])
# ARG_HELP([Prepare musl-cross-make repository (copy config, apply patches  ...)])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='vh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_commit_id="${musl_cross_make_default_commit_id}"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_verbose="off"


print_help()
{
	printf '%s\n' "Prepare musl-cross-make repository (copy config, apply patches  ...)"
	printf 'Usage: %s [-v|--(no-)verbose] [-h|--help] [<commit-id>]\n' "$0"
	printf '\t%s\n' "<commit-id>: Commit id (ex: 53280e53a32202a0ee874911fc52005874db344b) (default: '${musl_cross_make_default_commit_id}')"
	printf '\t%s\n' "-v, --verbose, --no-verbose: enable verbose mode (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-v|--no-verbose|--verbose)
				_arg_verbose="on"
				test "${1:0:5}" = "--no-" && _arg_verbose="off"
				;;
			-v*)
				_arg_verbose="on"
				_next="${_key##-v}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-v" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_commit_id "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv

# patch musl-cross-make source files
patch_musl_cross_make()
{
    [ ${_arg_verbose} == "on" ] && echo "Patching 'musl-cross-make' sources..."

    # ensure repository exists
    if ! [ -d ${repo_dir} ]
    then
        echo "Local repository does not exist. Run 'checkout_musl-cross-make.sh' script first" 1>&2
        return 1
    fi

    # ensure expected commit is checked out
    cd ${repo_dir} && \
        current_commit="$(git rev-parse HEAD)"
    if [ ${current_commit} != ${_arg_commit_id} ]
    then
        echo "Current commit (${current_commit}) does not match expected one (${_arg_commit_id}). Run 'checkout_musl-cross-make.sh' script first" 1>&2
        return 1
    fi

    _patch_dir="${custom_dir}/musl-cross-make/patches"
    _need_patch=0
    # used to keep track of whether or not repo was patched
    _patched_marker="${repo_dir}/.patched-${_arg_commit_id}"

    # patches have already been applied
    if ! [ -f ${_patched_marker} ]
    then
        cd ${repo_dir}

        for file in $(ls ${_patch_dir}/*.patch)
        do
            # check if patch has already been applied
            patch -Rp1 -s -f --dry-run <${file} >/dev/null 2>&1
            if [ $? -ne 0 ]
            then
                _need_patch=1
                patch -Np1 <${file} || return 1
            fi
        done
        # create marker
        touch ${_patched_marker}
    fi

    if [ ${_need_patch} -eq 0 ]
    then
        [ ${_arg_verbose} == "on" ] && echo "'musl-cross-make' sources already patched"
    else
        [ ${_arg_verbose} == "on" ] && echo "Successfully patched 'musl-cross-make' sources"
    fi

    return 0
}

_PRINT_HELP=no
repo_dir="${script_dir}/../../musl-cross-make-repo"
# directory containing custom files
custom_dir="${script_dir}/../custom"

patch_musl_cross_make || die "Could not patch 'musl-cross-make'"

cp ${custom_dir}/musl-cross-make/config.mak ${repo_dir} || die "Could not copy 'config.mak' to repository"

[ ${_arg_verbose} == "on" ] && echo "Repository ready for compilation"

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
